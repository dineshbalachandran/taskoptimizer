package com.infosys.taskoptimizer.taskassignschedule.solver;
    dialect "java"

import java.util.List;
import java.util.ArrayList;

import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;

import com.infosys.taskoptimizer.taskassignschedule.domain.TaskAssignment;
import com.infosys.taskoptimizer.taskassignschedule.domain.Task;
import com.infosys.taskoptimizer.taskassignschedule.domain.Technician;
import com.infosys.taskoptimizer.taskassignschedule.domain.OptControlParameters;
import com.infosys.taskoptimizer.taskassignschedule.drools.PeriodWrapper;
import com.infosys.taskoptimizer.taskassignschedule.drools.TechnicianPeriod;
import com.infosys.taskoptimizer.taskassignschedule.TaskAssignSchedule;

global HardMediumSoftLongScoreHolder scoreHolder;

// Setup
rule "period"
    salience 4
    when
        TaskAssignSchedule($periodFrom : periodFrom, $periodTo : periodTo)
    then
        for (int i = $periodFrom - 1; i <= $periodTo; i++) {
            insert(new PeriodWrapper(i));
        }
end

// Introduce TechnicianPeriod to score efficiently
rule "BootstrapTechnicianPeriod"
    salience 3
    when
        TaskAssignSchedule($periodFrom : periodFrom, $periodTo : periodTo)
        PeriodWrapper(period == $periodFrom - 1);
        $technician : Technician()
    then
        insertLogical(new TechnicianPeriod($technician, $periodFrom - 1, java.util.Collections.EMPTY_LIST, null));
end

rule "TechnicianPeriod"
    salience 2
    when
        TaskAssignSchedule($periodFrom : periodFrom)
        PeriodWrapper($period : period, period >= $periodFrom);
        $technician : Technician()
        $taskAssignments : ArrayList() from collect (
            TaskAssignment(technician == $technician, start == $period)
        )
        $prevTechPeriod : TechnicianPeriod(technician == $technician, period == $period - 1)
    then
        insertLogical(new TechnicianPeriod($technician, $period, $taskAssignments, $prevTechPeriod));
end

// ############################################################################
// Hard constraints
// ############################################################################
rule "skill"
    when
        TaskAssignment(matchingSkill == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "token"
    when
        TaskAssignment(matchingToken == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "technicianCapacity"
    when
        TechnicianPeriod($capacityRemaining: capacityRemaining < 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $capacityRemaining);
end

rule "technicianLocationInPeriod"
    when
        TechnicianPeriod($noOfTaskLocations : noOfTaskLocations > 1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$noOfTaskLocations + 1);
end


// ############################################################################
// Medium constraints
// ############################################################################
rule "technicianCost"
    when
       TechnicianPeriod($technician : technician, noOfTaskLocations > 0)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -$technician.cost);
end

// ############################################################################
// Soft constraints
// ############################################################################
rule "relocationCost"
    when
        TaskAssignSchedule($optControlParameters : optControlParameters, optControlParameters.relocationCost > 0)
        TechnicianPeriod($location: location, $technician : technician, $period : period)
        exists TechnicianPeriod(technician == $technician, period == $period + 1, location != $location, noOfTaskLocations == 1)
        accumulate(
            TechnicianPeriod(technician == $technician, period == $period + 1, location != $location, noOfTaskLocations == 1);
            $relocations : count(1)
         )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -$optControlParameters.relocationCost * $relocations);
end

rule "startDeviationCost"
    when
        TaskAssignSchedule($optControlParameters : optControlParameters, optControlParameters.startDeviationCost > 0)
        accumulate(
            $taskAssignment : TaskAssignment($task: task, startDeviation < 0);
            $onTimeStartDeviation : sum($taskAssignment.getFactoredStartDeviation($optControlParameters.getTaskPriorityFactor($task.priority)))
         )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $optControlParameters.startDeviationCost * $onTimeStartDeviation);
end

rule "endDeviationCost"
    when
        TaskAssignSchedule($optControlParameters : optControlParameters, $durationsPerPeriod : durationsPerPeriod, optControlParameters.endDeviationCost > 0)
        accumulate(
            $taskAssignment : TaskAssignment($task: task, endDeviation < 0);
            $onTimeEndDeviation : sum($taskAssignment.getFactoredEndDeviation($optControlParameters.getTaskPriorityFactor($task.priority)))
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $optControlParameters.endDeviationCost * $onTimeEndDeviation);
end
